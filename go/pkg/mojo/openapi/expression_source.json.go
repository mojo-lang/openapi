// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package openapi

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/mojo-lang/core/go/pkg/mojo/core"
)

func init() {
	core.RegisterJSONTypeDecoder("openapi.Expression_Source", &ExpressionSourceStringCodec{})
	core.RegisterJSONTypeEncoder("openapi.Expression_Source", &ExpressionSourceStringCodec{})
}

// BareExpressionSource will be jsonify to raw, without any codec
type BareExpressionSource Expression_Source

type ExpressionSourceStringCodec struct {
	IsFieldPointer bool
}

func (codec *ExpressionSourceStringCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	s := iter.ReadString()
	source := codec.source(ptr)
	if source == nil {
		source = &Expression_Source{}
		*(**Expression_Source)(ptr) = source
	}

	if err := source.Parse(s); err != nil {
		iter.ReportError("ExpressionSourceStringCodec", err.Error())
	}
}

func (codec *ExpressionSourceStringCodec) IsEmpty(ptr unsafe.Pointer) bool {
	source := codec.source(ptr)
	if source != nil {
		if checker, ok := interface{}(source).(core.EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *ExpressionSourceStringCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	source := codec.source(ptr)
	stream.WriteString(source.Format())
}

func (codec *ExpressionSourceStringCodec) source(ptr unsafe.Pointer) *Expression_Source {
	if codec.IsFieldPointer {
		return *(**Expression_Source)(ptr)
	}
	return (*Expression_Source)(ptr)
}

type ExpressionSourceStructCodec struct {
	IsFieldPointer bool
}

func (codec *ExpressionSourceStructCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	source := codec.bareExpressionSource(ptr)
	if a := iter.ReadAny(); a.ValueType() == jsoniter.ObjectValue {
		if source == nil {
			source = &BareExpressionSource{}
			*(**BareExpressionSource)(ptr) = source
		}
		a.ToVal(source)
	}
}

func (codec *ExpressionSourceStructCodec) IsEmpty(ptr unsafe.Pointer) bool {
	source := (*Expression_Source)(codec.bareExpressionSource(ptr))
	if source != nil {
		if checker, ok := interface{}(source).(core.EmptyChecker); ok {
			return checker.IsEmpty()
		}
		return false
	}
	return true
}

func (codec *ExpressionSourceStructCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	stream.WriteVal(codec.bareExpressionSource(ptr))
}

func (codec *ExpressionSourceStructCodec) bareExpressionSource(ptr unsafe.Pointer) *BareExpressionSource {
	if codec.IsFieldPointer {
		return *(**BareExpressionSource)(ptr)
	}
	return (*BareExpressionSource)(ptr)
}
