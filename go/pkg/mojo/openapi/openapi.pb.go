// Code generated by mojo. DO NOT EDIT.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.12
// source: mojo/openapi/openapi.proto

package openapi

import (
	_ "github.com/mojo-lang/core/go/pkg/mojo"
	core "github.com/mojo-lang/core/go/pkg/mojo/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HttpStatusCode int32

const (
	HttpStatusCode_HTTP_STATUS_CODE_DEFAULT  HttpStatusCode = 0
	HttpStatusCode_HTTP_STATUS_CODE_CODE_200 HttpStatusCode = 1
)

// Enum value maps for HttpStatusCode.
var (
	HttpStatusCode_name = map[int32]string{
		0: "HTTP_STATUS_CODE_DEFAULT",
		1: "HTTP_STATUS_CODE_CODE_200",
	}
	HttpStatusCode_value = map[string]int32{
		"HTTP_STATUS_CODE_DEFAULT":  0,
		"HTTP_STATUS_CODE_CODE_200": 1,
	}
)

func (x HttpStatusCode) Enum() *HttpStatusCode {
	p := new(HttpStatusCode)
	*p = x
	return p
}

func (x HttpStatusCode) ToText() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_mojo_openapi_openapi_proto_enumTypes[0].Descriptor()
}

func (HttpStatusCode) Type() protoreflect.EnumType {
	return &file_mojo_openapi_openapi_proto_enumTypes[0]
}

func (x HttpStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpStatusCode.Descriptor instead.
func (HttpStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{0}
}

type Parameter_Location int32

const (
	Parameter_LOCATION_UNSPECIFIED Parameter_Location = 0
	Parameter_LOCATION_PATH        Parameter_Location = 1
	Parameter_LOCATION_QUERY       Parameter_Location = 2
	Parameter_LOCATION_HEADER      Parameter_Location = 3
	Parameter_LOCATION_COOKIE      Parameter_Location = 4
)

// Enum value maps for Parameter_Location.
var (
	Parameter_Location_name = map[int32]string{
		0: "LOCATION_UNSPECIFIED",
		1: "LOCATION_PATH",
		2: "LOCATION_QUERY",
		3: "LOCATION_HEADER",
		4: "LOCATION_COOKIE",
	}
	Parameter_Location_value = map[string]int32{
		"LOCATION_UNSPECIFIED": 0,
		"LOCATION_PATH":        1,
		"LOCATION_QUERY":       2,
		"LOCATION_HEADER":      3,
		"LOCATION_COOKIE":      4,
	}
)

func (x Parameter_Location) Enum() *Parameter_Location {
	p := new(Parameter_Location)
	*p = x
	return p
}

func (x Parameter_Location) ToText() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Parameter_Location) Descriptor() protoreflect.EnumDescriptor {
	return file_mojo_openapi_openapi_proto_enumTypes[1].Descriptor()
}

func (Parameter_Location) Type() protoreflect.EnumType {
	return &file_mojo_openapi_openapi_proto_enumTypes[1]
}

func (x Parameter_Location) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Parameter_Location.Descriptor instead.
func (Parameter_Location) EnumDescriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{7, 0}
}

type Parameter_Style int32

const (
	Parameter_STYLE_UNSPECIFIED     Parameter_Style = 0
	Parameter_STYLE_MATRIX          Parameter_Style = 1
	Parameter_STYLE_LABEL           Parameter_Style = 2
	Parameter_STYLE_FORM            Parameter_Style = 3
	Parameter_STYLE_SIMPLE          Parameter_Style = 4
	Parameter_STYLE_SPACE_DELIMITED Parameter_Style = 5
	Parameter_STYLE_PIPE_DELIMITED  Parameter_Style = 6
	Parameter_STYLE_DEEP_OBJECT     Parameter_Style = 7
)

// Enum value maps for Parameter_Style.
var (
	Parameter_Style_name = map[int32]string{
		0: "STYLE_UNSPECIFIED",
		1: "STYLE_MATRIX",
		2: "STYLE_LABEL",
		3: "STYLE_FORM",
		4: "STYLE_SIMPLE",
		5: "STYLE_SPACE_DELIMITED",
		6: "STYLE_PIPE_DELIMITED",
		7: "STYLE_DEEP_OBJECT",
	}
	Parameter_Style_value = map[string]int32{
		"STYLE_UNSPECIFIED":     0,
		"STYLE_MATRIX":          1,
		"STYLE_LABEL":           2,
		"STYLE_FORM":            3,
		"STYLE_SIMPLE":          4,
		"STYLE_SPACE_DELIMITED": 5,
		"STYLE_PIPE_DELIMITED":  6,
		"STYLE_DEEP_OBJECT":     7,
	}
)

func (x Parameter_Style) Enum() *Parameter_Style {
	p := new(Parameter_Style)
	*p = x
	return p
}

func (x Parameter_Style) ToText() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Parameter_Style) Descriptor() protoreflect.EnumDescriptor {
	return file_mojo_openapi_openapi_proto_enumTypes[2].Descriptor()
}

func (Parameter_Style) Type() protoreflect.EnumType {
	return &file_mojo_openapi_openapi_proto_enumTypes[2]
}

func (x Parameter_Style) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Parameter_Style.Descriptor instead.
func (Parameter_Style) EnumDescriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{7, 1}
}

type Schema_Type int32

const (
	Schema_TYPE_UNSPECIFIED Schema_Type = 0
	Schema_TYPE_NULL        Schema_Type = 1
	Schema_TYPE_BOOLEAN     Schema_Type = 2
	Schema_TYPE_INTEGER     Schema_Type = 3
	Schema_TYPE_NUMBER      Schema_Type = 4
	Schema_TYPE_STRING      Schema_Type = 5
	Schema_TYPE_ARRAY       Schema_Type = 10
	Schema_TYPE_OBJECT      Schema_Type = 11
)

// Enum value maps for Schema_Type.
var (
	Schema_Type_name = map[int32]string{
		0:  "TYPE_UNSPECIFIED",
		1:  "TYPE_NULL",
		2:  "TYPE_BOOLEAN",
		3:  "TYPE_INTEGER",
		4:  "TYPE_NUMBER",
		5:  "TYPE_STRING",
		10: "TYPE_ARRAY",
		11: "TYPE_OBJECT",
	}
	Schema_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_NULL":        1,
		"TYPE_BOOLEAN":     2,
		"TYPE_INTEGER":     3,
		"TYPE_NUMBER":      4,
		"TYPE_STRING":      5,
		"TYPE_ARRAY":       10,
		"TYPE_OBJECT":      11,
	}
)

func (x Schema_Type) Enum() *Schema_Type {
	p := new(Schema_Type)
	*p = x
	return p
}

func (x Schema_Type) ToText() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Schema_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mojo_openapi_openapi_proto_enumTypes[3].Descriptor()
}

func (Schema_Type) Type() protoreflect.EnumType {
	return &file_mojo_openapi_openapi_proto_enumTypes[3]
}

func (x Schema_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Schema_Type.Descriptor instead.
func (Schema_Type) EnumDescriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{12, 0}
}

type Components struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schemas         map[string]*Schema         `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Responses       map[string]*Response       `protobuf:"bytes,2,rep,name=responses,proto3" json:"responses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Parameters      map[string]*Parameter      `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Examples        map[string]*Example        `protobuf:"bytes,4,rep,name=examples,proto3" json:"examples,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RequestBodies   map[string]*RequestBody    `protobuf:"bytes,5,rep,name=request_bodies,json=requestBodies,proto3" json:"requestBodies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Headers         map[string]*Header         `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SecuritySchemes map[string]*SecurityScheme `protobuf:"bytes,7,rep,name=security_schemes,json=securitySchemes,proto3" json:"securitySchemes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Links           map[string]*Link           `protobuf:"bytes,8,rep,name=links,proto3" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Callbacks       map[string]*Callback       `protobuf:"bytes,9,rep,name=callbacks,proto3" json:"callbacks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PathItems       map[string]*PathItem       `protobuf:"bytes,10,rep,name=path_items,json=pathItems,proto3" json:"pathItems,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Components) Reset() {
	*x = Components{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_openapi_openapi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Components) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Components) ProtoMessage() {}

func (x *Components) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_openapi_openapi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Components.ProtoReflect.Descriptor instead.
func (*Components) Descriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{0}
}

func (x *Components) GetSchemas() map[string]*Schema {
	if x != nil {
		return x.Schemas
	}
	return nil
}

func (x *Components) GetResponses() map[string]*Response {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *Components) GetParameters() map[string]*Parameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *Components) GetExamples() map[string]*Example {
	if x != nil {
		return x.Examples
	}
	return nil
}

func (x *Components) GetRequestBodies() map[string]*RequestBody {
	if x != nil {
		return x.RequestBodies
	}
	return nil
}

func (x *Components) GetHeaders() map[string]*Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Components) GetSecuritySchemes() map[string]*SecurityScheme {
	if x != nil {
		return x.SecuritySchemes
	}
	return nil
}

func (x *Components) GetLinks() map[string]*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Components) GetCallbacks() map[string]*Callback {
	if x != nil {
		return x.Callbacks
	}
	return nil
}

func (x *Components) GetPathItems() map[string]*PathItem {
	if x != nil {
		return x.PathItems
	}
	return nil
}

type OpenAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openapi      *core.Version        `protobuf:"bytes,1,opt,name=openapi,proto3" json:"openapi,omitempty"`
	Info         *Info                `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Servers      []*Server            `protobuf:"bytes,4,rep,name=servers,proto3" json:"servers,omitempty"`
	Paths        *Paths               `protobuf:"bytes,5,opt,name=paths,proto3" json:"paths,omitempty"`
	Components   *Components          `protobuf:"bytes,10,opt,name=components,proto3" json:"components,omitempty"`
	Security     *SecurityRequirement `protobuf:"bytes,11,opt,name=security,proto3" json:"security,omitempty"`
	Tags         []*Tag               `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty"`
	ExternalDocs *ExternalDocument    `protobuf:"bytes,13,opt,name=external_docs,json=externalDocs,proto3" json:"externalDocs,omitempty"`
}

func (x *OpenAPI) Reset() {
	*x = OpenAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_openapi_openapi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenAPI) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAPI) ProtoMessage() {}

func (x *OpenAPI) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_openapi_openapi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenAPI.ProtoReflect.Descriptor instead.
func (*OpenAPI) Descriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{1}
}

func (x *OpenAPI) GetOpenapi() *core.Version {
	if x != nil {
		return x.Openapi
	}
	return nil
}

func (x *OpenAPI) GetInfo() *Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *OpenAPI) GetServers() []*Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *OpenAPI) GetPaths() *Paths {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *OpenAPI) GetComponents() *Components {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *OpenAPI) GetSecurity() *SecurityRequirement {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *OpenAPI) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *OpenAPI) GetExternalDocs() *ExternalDocument {
	if x != nil {
		return x.ExternalDocs
	}
	return nil
}

type Callback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vals map[string]*PathItem `protobuf:"bytes,1,rep,name=vals,proto3" json:"vals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Callback) Reset() {
	*x = Callback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_openapi_openapi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Callback) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Callback) ProtoMessage() {}

func (x *Callback) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_openapi_openapi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Callback.ProtoReflect.Descriptor instead.
func (*Callback) Descriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{2}
}

func (x *Callback) GetVals() map[string]*PathItem {
	if x != nil {
		return x.Vals
	}
	return nil
}

type Encoding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentType   string                          `protobuf:"bytes,1,opt,name=content_type,json=contentType,proto3" json:"contentType,omitempty"`
	Headers       map[string]*ReferenceableHeader `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Style         string                          `protobuf:"bytes,3,opt,name=style,proto3" json:"style,omitempty"`
	Explode       bool                            `protobuf:"varint,4,opt,name=explode,proto3" json:"explode,omitempty"`
	AllowReserved bool                            `protobuf:"varint,5,opt,name=allow_reserved,json=allowReserved,proto3" json:"allowReserved,omitempty"`
}

func (x *Encoding) Reset() {
	*x = Encoding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_openapi_openapi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Encoding) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encoding) ProtoMessage() {}

func (x *Encoding) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_openapi_openapi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encoding.ProtoReflect.Descriptor instead.
func (*Encoding) Descriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{3}
}

func (x *Encoding) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *Encoding) GetHeaders() map[string]*ReferenceableHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Encoding) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *Encoding) GetExplode() bool {
	if x != nil {
		return x.Explode
	}
	return false
}

func (x *Encoding) GetAllowReserved() bool {
	if x != nil {
		return x.AllowReserved
	}
	return false
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	In              Parameter_Location               `protobuf:"varint,2,opt,name=in,proto3,enum=mojo.openapi.Parameter_Location" json:"in,omitempty"`
	Description     string                           `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Required        bool                             `protobuf:"varint,4,opt,name=required,proto3" json:"required,omitempty"`
	Deprecated      bool                             `protobuf:"varint,5,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	AllowEmptyValue bool                             `protobuf:"varint,6,opt,name=allow_empty_value,json=allowEmptyValue,proto3" json:"allowEmptyValue,omitempty"`
	Style           Parameter_Style                  `protobuf:"varint,10,opt,name=style,proto3,enum=mojo.openapi.Parameter_Style" json:"style,omitempty"`
	Explode         bool                             `protobuf:"varint,11,opt,name=explode,proto3" json:"explode,omitempty"`
	AllowReserved   bool                             `protobuf:"varint,12,opt,name=allow_reserved,json=allowReserved,proto3" json:"allowReserved,omitempty"`
	Schema          *ReferenceableSchema             `protobuf:"bytes,13,opt,name=schema,proto3" json:"schema,omitempty"`
	Example         *core.Value                      `protobuf:"bytes,14,opt,name=example,proto3" json:"example,omitempty"`
	Examples        map[string]*ReferenceableExample `protobuf:"bytes,15,rep,name=examples,proto3" json:"examples,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Content         map[string]*MediaType            `protobuf:"bytes,20,rep,name=content,proto3" json:"content,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_openapi_openapi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_openapi_openapi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{4}
}

func (x *Header) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Header) GetIn() Parameter_Location {
	if x != nil {
		return x.In
	}
	return Parameter_LOCATION_UNSPECIFIED
}

func (x *Header) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Header) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *Header) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *Header) GetAllowEmptyValue() bool {
	if x != nil {
		return x.AllowEmptyValue
	}
	return false
}

func (x *Header) GetStyle() Parameter_Style {
	if x != nil {
		return x.Style
	}
	return Parameter_STYLE_UNSPECIFIED
}

func (x *Header) GetExplode() bool {
	if x != nil {
		return x.Explode
	}
	return false
}

func (x *Header) GetAllowReserved() bool {
	if x != nil {
		return x.AllowReserved
	}
	return false
}

func (x *Header) GetSchema() *ReferenceableSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *Header) GetExample() *core.Value {
	if x != nil {
		return x.Example
	}
	return nil
}

func (x *Header) GetExamples() map[string]*ReferenceableExample {
	if x != nil {
		return x.Examples
	}
	return nil
}

func (x *Header) GetContent() map[string]*MediaType {
	if x != nil {
		return x.Content
	}
	return nil
}

type MediaType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema   *ReferenceableSchema             `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Example  *core.Value                      `protobuf:"bytes,2,opt,name=example,proto3" json:"example,omitempty"`
	Examples map[string]*ReferenceableExample `protobuf:"bytes,3,rep,name=examples,proto3" json:"examples,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Encoding map[string]*Encoding             `protobuf:"bytes,5,rep,name=encoding,proto3" json:"encoding,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MediaType) Reset() {
	*x = MediaType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_openapi_openapi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaType) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaType) ProtoMessage() {}

func (x *MediaType) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_openapi_openapi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaType.ProtoReflect.Descriptor instead.
func (*MediaType) Descriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{5}
}

func (x *MediaType) GetSchema() *ReferenceableSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *MediaType) GetExample() *core.Value {
	if x != nil {
		return x.Example
	}
	return nil
}

func (x *MediaType) GetExamples() map[string]*ReferenceableExample {
	if x != nil {
		return x.Examples
	}
	return nil
}

func (x *MediaType) GetEncoding() map[string]*Encoding {
	if x != nil {
		return x.Encoding
	}
	return nil
}

type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags         []string                          `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	Summary      string                            `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	Description  *CachedDocument                   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ExternalDocs *ExternalDocument                 `protobuf:"bytes,4,opt,name=external_docs,json=externalDocs,proto3" json:"externalDocs,omitempty"`
	OperationId  string                            `protobuf:"bytes,5,opt,name=operation_id,json=operationId,proto3" json:"operationId,omitempty"`
	Parameters   []*ReferenceableParameter         `protobuf:"bytes,10,rep,name=parameters,proto3" json:"parameters,omitempty"`
	RequestBody  *ReferenceableRequestBody         `protobuf:"bytes,11,opt,name=request_body,json=requestBody,proto3" json:"requestBody,omitempty"`
	Responses    *Responses                        `protobuf:"bytes,12,opt,name=responses,proto3" json:"responses,omitempty"`
	Callbacks    map[string]*ReferenceableCallback `protobuf:"bytes,13,rep,name=callbacks,proto3" json:"callbacks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Deprecated   bool                              `protobuf:"varint,15,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	Security     *SecurityRequirement              `protobuf:"bytes,16,opt,name=security,proto3" json:"security,omitempty"`
	Servers      []*Server                         `protobuf:"bytes,17,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_openapi_openapi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_openapi_openapi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{6}
}

func (x *Operation) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Operation) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Operation) GetDescription() *CachedDocument {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Operation) GetExternalDocs() *ExternalDocument {
	if x != nil {
		return x.ExternalDocs
	}
	return nil
}

func (x *Operation) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *Operation) GetParameters() []*ReferenceableParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *Operation) GetRequestBody() *ReferenceableRequestBody {
	if x != nil {
		return x.RequestBody
	}
	return nil
}

func (x *Operation) GetResponses() *Responses {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *Operation) GetCallbacks() map[string]*ReferenceableCallback {
	if x != nil {
		return x.Callbacks
	}
	return nil
}

func (x *Operation) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *Operation) GetSecurity() *SecurityRequirement {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *Operation) GetServers() []*Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

type Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	In              Parameter_Location               `protobuf:"varint,2,opt,name=in,proto3,enum=mojo.openapi.Parameter_Location" json:"in,omitempty"`
	Description     string                           `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Required        bool                             `protobuf:"varint,4,opt,name=required,proto3" json:"required,omitempty"`
	Deprecated      bool                             `protobuf:"varint,5,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	AllowEmptyValue bool                             `protobuf:"varint,6,opt,name=allow_empty_value,json=allowEmptyValue,proto3" json:"allowEmptyValue,omitempty"`
	Style           Parameter_Style                  `protobuf:"varint,10,opt,name=style,proto3,enum=mojo.openapi.Parameter_Style" json:"style,omitempty"`
	Explode         bool                             `protobuf:"varint,11,opt,name=explode,proto3" json:"explode,omitempty"`
	AllowReserved   bool                             `protobuf:"varint,12,opt,name=allow_reserved,json=allowReserved,proto3" json:"allowReserved,omitempty"`
	Schema          *ReferenceableSchema             `protobuf:"bytes,13,opt,name=schema,proto3" json:"schema,omitempty"`
	Example         *core.Value                      `protobuf:"bytes,14,opt,name=example,proto3" json:"example,omitempty"`
	Examples        map[string]*ReferenceableExample `protobuf:"bytes,15,rep,name=examples,proto3" json:"examples,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Content         map[string]*MediaType            `protobuf:"bytes,20,rep,name=content,proto3" json:"content,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Parameter) Reset() {
	*x = Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_openapi_openapi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameter) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameter) ProtoMessage() {}

func (x *Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_openapi_openapi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameter.ProtoReflect.Descriptor instead.
func (*Parameter) Descriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{7}
}

func (x *Parameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Parameter) GetIn() Parameter_Location {
	if x != nil {
		return x.In
	}
	return Parameter_LOCATION_UNSPECIFIED
}

func (x *Parameter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Parameter) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *Parameter) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *Parameter) GetAllowEmptyValue() bool {
	if x != nil {
		return x.AllowEmptyValue
	}
	return false
}

func (x *Parameter) GetStyle() Parameter_Style {
	if x != nil {
		return x.Style
	}
	return Parameter_STYLE_UNSPECIFIED
}

func (x *Parameter) GetExplode() bool {
	if x != nil {
		return x.Explode
	}
	return false
}

func (x *Parameter) GetAllowReserved() bool {
	if x != nil {
		return x.AllowReserved
	}
	return false
}

func (x *Parameter) GetSchema() *ReferenceableSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *Parameter) GetExample() *core.Value {
	if x != nil {
		return x.Example
	}
	return nil
}

func (x *Parameter) GetExamples() map[string]*ReferenceableExample {
	if x != nil {
		return x.Examples
	}
	return nil
}

func (x *Parameter) GetContent() map[string]*MediaType {
	if x != nil {
		return x.Content
	}
	return nil
}

type PathItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref         string                    `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	Summary     string                    `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	Description *CachedDocument           `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Get         *Operation                `protobuf:"bytes,5,opt,name=get,proto3" json:"get,omitempty"`
	Put         *Operation                `protobuf:"bytes,6,opt,name=put,proto3" json:"put,omitempty"`
	Post        *Operation                `protobuf:"bytes,7,opt,name=post,proto3" json:"post,omitempty"`
	Delete      *Operation                `protobuf:"bytes,8,opt,name=delete,proto3" json:"delete,omitempty"`
	Options     *Operation                `protobuf:"bytes,9,opt,name=options,proto3" json:"options,omitempty"`
	Head        *Operation                `protobuf:"bytes,10,opt,name=head,proto3" json:"head,omitempty"`
	Patch       *Operation                `protobuf:"bytes,11,opt,name=patch,proto3" json:"patch,omitempty"`
	Trace       *Operation                `protobuf:"bytes,12,opt,name=trace,proto3" json:"trace,omitempty"`
	Servers     []*Server                 `protobuf:"bytes,13,rep,name=servers,proto3" json:"servers,omitempty"`
	Parameters  []*ReferenceableParameter `protobuf:"bytes,15,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *PathItem) Reset() {
	*x = PathItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_openapi_openapi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathItem) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathItem) ProtoMessage() {}

func (x *PathItem) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_openapi_openapi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathItem.ProtoReflect.Descriptor instead.
func (*PathItem) Descriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{8}
}

func (x *PathItem) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *PathItem) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *PathItem) GetDescription() *CachedDocument {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *PathItem) GetGet() *Operation {
	if x != nil {
		return x.Get
	}
	return nil
}

func (x *PathItem) GetPut() *Operation {
	if x != nil {
		return x.Put
	}
	return nil
}

func (x *PathItem) GetPost() *Operation {
	if x != nil {
		return x.Post
	}
	return nil
}

func (x *PathItem) GetDelete() *Operation {
	if x != nil {
		return x.Delete
	}
	return nil
}

func (x *PathItem) GetOptions() *Operation {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *PathItem) GetHead() *Operation {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *PathItem) GetPatch() *Operation {
	if x != nil {
		return x.Patch
	}
	return nil
}

func (x *PathItem) GetTrace() *Operation {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *PathItem) GetServers() []*Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *PathItem) GetParameters() []*ReferenceableParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type RequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description *CachedDocument       `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Content     map[string]*MediaType `protobuf:"bytes,2,rep,name=content,proto3" json:"content,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Required    bool                  `protobuf:"varint,3,opt,name=required,proto3" json:"required,omitempty"`
}

func (x *RequestBody) Reset() {
	*x = RequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_openapi_openapi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBody) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBody) ProtoMessage() {}

func (x *RequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_openapi_openapi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBody.ProtoReflect.Descriptor instead.
func (*RequestBody) Descriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{9}
}

func (x *RequestBody) GetDescription() *CachedDocument {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *RequestBody) GetContent() map[string]*MediaType {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *RequestBody) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string                          `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Headers     map[string]*ReferenceableHeader `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Content     map[string]*MediaType           `protobuf:"bytes,3,rep,name=content,proto3" json:"content,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Links       map[string]*ReferenceableLink   `protobuf:"bytes,4,rep,name=links,proto3" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_openapi_openapi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_openapi_openapi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{10}
}

func (x *Response) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Response) GetHeaders() map[string]*ReferenceableHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Response) GetContent() map[string]*MediaType {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Response) GetLinks() map[string]*ReferenceableLink {
	if x != nil {
		return x.Links
	}
	return nil
}

type Responses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vals map[string]*ReferenceableResponse `protobuf:"bytes,1,rep,name=vals,proto3" json:"vals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Responses) Reset() {
	*x = Responses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_openapi_openapi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Responses) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Responses) ProtoMessage() {}

func (x *Responses) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_openapi_openapi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Responses.ProtoReflect.Descriptor instead.
func (*Responses) Descriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{11}
}

func (x *Responses) GetVals() map[string]*ReferenceableResponse {
	if x != nil {
		return x.Vals
	}
	return nil
}

type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Discriminator        *Discriminator                  `protobuf:"bytes,1,opt,name=discriminator,proto3" json:"discriminator,omitempty"`
	Xml                  *Xml                            `protobuf:"bytes,2,opt,name=xml,proto3" json:"xml,omitempty"`
	ExternalDocs         *ExternalDocument               `protobuf:"bytes,3,opt,name=external_docs,json=externalDocs,proto3" json:"externalDocs,omitempty"`
	Example              *core.Value                     `protobuf:"bytes,4,opt,name=example,proto3" json:"example,omitempty"`
	Title                string                          `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`
	Description          *CachedDocument                 `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	Type                 Schema_Type                     `protobuf:"varint,12,opt,name=type,proto3,enum=mojo.openapi.Schema_Type" json:"type,omitempty"`
	Format               string                          `protobuf:"bytes,13,opt,name=format,proto3" json:"format,omitempty"`
	MultipleOf           float64                         `protobuf:"fixed64,14,opt,name=multiple_of,json=multipleOf,proto3" json:"multipleOf,omitempty"`
	Maximum              float64                         `protobuf:"fixed64,15,opt,name=maximum,proto3" json:"maximum,omitempty"`
	ExclusiveMaximum     float64                         `protobuf:"fixed64,16,opt,name=exclusive_maximum,json=exclusiveMaximum,proto3" json:"exclusiveMaximum,omitempty"`
	Minimum              float64                         `protobuf:"fixed64,17,opt,name=minimum,proto3" json:"minimum,omitempty"`
	ExclusiveMinimum     float64                         `protobuf:"fixed64,18,opt,name=exclusive_minimum,json=exclusiveMinimum,proto3" json:"exclusiveMinimum,omitempty"`
	MaxLength            uint64                          `protobuf:"varint,19,opt,name=max_length,json=maxLength,proto3" json:"maxLength,omitempty"`
	MinLength            uint64                          `protobuf:"varint,20,opt,name=min_length,json=minLength,proto3" json:"minLength,omitempty"`
	Pattern              *core.Regex                     `protobuf:"bytes,21,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Items                *ReferenceableSchema            `protobuf:"bytes,22,opt,name=items,proto3" json:"items,omitempty"`
	MaxItems             uint64                          `protobuf:"varint,23,opt,name=max_items,json=maxItems,proto3" json:"maxItems,omitempty"`
	MinItems             uint64                          `protobuf:"varint,24,opt,name=min_items,json=minItems,proto3" json:"minItems,omitempty"`
	UniqueItems          bool                            `protobuf:"varint,25,opt,name=unique_items,json=uniqueItems,proto3" json:"uniqueItems,omitempty"`
	Properties           map[string]*ReferenceableSchema `protobuf:"bytes,26,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AdditionalProperties *ReferenceableSchema            `protobuf:"bytes,27,opt,name=additional_properties,json=additionalProperties,proto3" json:"additionalProperties,omitempty"`
	MaxProperties        uint64                          `protobuf:"varint,28,opt,name=max_properties,json=maxProperties,proto3" json:"maxProperties,omitempty"`
	MinProperties        uint64                          `protobuf:"varint,29,opt,name=min_properties,json=minProperties,proto3" json:"minProperties,omitempty"`
	Required             []string                        `protobuf:"bytes,30,rep,name=required,proto3" json:"required,omitempty"`
	Enum                 []*core.Value                   `protobuf:"bytes,31,rep,name=enum,proto3" json:"enum,omitempty"`
	AllOf                []*ReferenceableSchema          `protobuf:"bytes,35,rep,name=all_of,json=allOf,proto3" json:"allOf,omitempty"`
	OneOf                []*ReferenceableSchema          `protobuf:"bytes,36,rep,name=one_of,json=oneOf,proto3" json:"oneOf,omitempty"`
	AnyOf                []*ReferenceableSchema          `protobuf:"bytes,37,rep,name=any_of,json=anyOf,proto3" json:"anyOf,omitempty"`
	Not                  *ReferenceableSchema            `protobuf:"bytes,38,opt,name=not,proto3" json:"not,omitempty"`
	Default              *core.Value                     `protobuf:"bytes,40,opt,name=default,proto3" json:"default,omitempty"`
	Nullable             bool                            `protobuf:"varint,50,opt,name=nullable,proto3" json:"nullable,omitempty"`
	ReadOnly             bool                            `protobuf:"varint,51,opt,name=read_only,json=readOnly,proto3" json:"readOnly,omitempty"`
	WriteOnly            bool                            `protobuf:"varint,52,opt,name=write_only,json=writeOnly,proto3" json:"writeOnly,omitempty"`
	Deprecated           bool                            `protobuf:"varint,53,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_openapi_openapi_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_openapi_openapi_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{12}
}

func (x *Schema) GetDiscriminator() *Discriminator {
	if x != nil {
		return x.Discriminator
	}
	return nil
}

func (x *Schema) GetXml() *Xml {
	if x != nil {
		return x.Xml
	}
	return nil
}

func (x *Schema) GetExternalDocs() *ExternalDocument {
	if x != nil {
		return x.ExternalDocs
	}
	return nil
}

func (x *Schema) GetExample() *core.Value {
	if x != nil {
		return x.Example
	}
	return nil
}

func (x *Schema) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Schema) GetDescription() *CachedDocument {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Schema) GetType() Schema_Type {
	if x != nil {
		return x.Type
	}
	return Schema_TYPE_UNSPECIFIED
}

func (x *Schema) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Schema) GetMultipleOf() float64 {
	if x != nil {
		return x.MultipleOf
	}
	return 0
}

func (x *Schema) GetMaximum() float64 {
	if x != nil {
		return x.Maximum
	}
	return 0
}

func (x *Schema) GetExclusiveMaximum() float64 {
	if x != nil {
		return x.ExclusiveMaximum
	}
	return 0
}

func (x *Schema) GetMinimum() float64 {
	if x != nil {
		return x.Minimum
	}
	return 0
}

func (x *Schema) GetExclusiveMinimum() float64 {
	if x != nil {
		return x.ExclusiveMinimum
	}
	return 0
}

func (x *Schema) GetMaxLength() uint64 {
	if x != nil {
		return x.MaxLength
	}
	return 0
}

func (x *Schema) GetMinLength() uint64 {
	if x != nil {
		return x.MinLength
	}
	return 0
}

func (x *Schema) GetPattern() *core.Regex {
	if x != nil {
		return x.Pattern
	}
	return nil
}

func (x *Schema) GetItems() *ReferenceableSchema {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Schema) GetMaxItems() uint64 {
	if x != nil {
		return x.MaxItems
	}
	return 0
}

func (x *Schema) GetMinItems() uint64 {
	if x != nil {
		return x.MinItems
	}
	return 0
}

func (x *Schema) GetUniqueItems() bool {
	if x != nil {
		return x.UniqueItems
	}
	return false
}

func (x *Schema) GetProperties() map[string]*ReferenceableSchema {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Schema) GetAdditionalProperties() *ReferenceableSchema {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

func (x *Schema) GetMaxProperties() uint64 {
	if x != nil {
		return x.MaxProperties
	}
	return 0
}

func (x *Schema) GetMinProperties() uint64 {
	if x != nil {
		return x.MinProperties
	}
	return 0
}

func (x *Schema) GetRequired() []string {
	if x != nil {
		return x.Required
	}
	return nil
}

func (x *Schema) GetEnum() []*core.Value {
	if x != nil {
		return x.Enum
	}
	return nil
}

func (x *Schema) GetAllOf() []*ReferenceableSchema {
	if x != nil {
		return x.AllOf
	}
	return nil
}

func (x *Schema) GetOneOf() []*ReferenceableSchema {
	if x != nil {
		return x.OneOf
	}
	return nil
}

func (x *Schema) GetAnyOf() []*ReferenceableSchema {
	if x != nil {
		return x.AnyOf
	}
	return nil
}

func (x *Schema) GetNot() *ReferenceableSchema {
	if x != nil {
		return x.Not
	}
	return nil
}

func (x *Schema) GetDefault() *core.Value {
	if x != nil {
		return x.Default
	}
	return nil
}

func (x *Schema) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

func (x *Schema) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *Schema) GetWriteOnly() bool {
	if x != nil {
		return x.WriteOnly
	}
	return false
}

func (x *Schema) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

type ReferenceableHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ReferenceableHeader:
	//	*ReferenceableHeader_Reference
	//	*ReferenceableHeader_Header
	ReferenceableHeader isReferenceableHeader_ReferenceableHeader `protobuf_oneof:"referenceable_header" json:"referenceableHeader,omitempty"`
}

func (x *ReferenceableHeader) Reset() {
	*x = ReferenceableHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_openapi_openapi_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceableHeader) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceableHeader) ProtoMessage() {}

func (x *ReferenceableHeader) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_openapi_openapi_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceableHeader.ProtoReflect.Descriptor instead.
func (*ReferenceableHeader) Descriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{13}
}

func (m *ReferenceableHeader) GetReferenceableHeader() isReferenceableHeader_ReferenceableHeader {
	if m != nil {
		return m.ReferenceableHeader
	}
	return nil
}

func (x *ReferenceableHeader) GetReference() *Reference {
	if x, ok := x.GetReferenceableHeader().(*ReferenceableHeader_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ReferenceableHeader) GetHeader() *Header {
	if x, ok := x.GetReferenceableHeader().(*ReferenceableHeader_Header); ok {
		return x.Header
	}
	return nil
}

type isReferenceableHeader_ReferenceableHeader interface {
	isReferenceableHeader_ReferenceableHeader()
}

type ReferenceableHeader_Reference struct {
	Reference *Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof" json:"reference,omitempty"`
}

type ReferenceableHeader_Header struct {
	Header *Header `protobuf:"bytes,2,opt,name=header,proto3,oneof" json:"header,omitempty"`
}

func (*ReferenceableHeader_Reference) isReferenceableHeader_ReferenceableHeader() {}

func (*ReferenceableHeader_Header) isReferenceableHeader_ReferenceableHeader() {}

type ReferenceableSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ReferenceableSchema:
	//	*ReferenceableSchema_Reference
	//	*ReferenceableSchema_Schema
	ReferenceableSchema isReferenceableSchema_ReferenceableSchema `protobuf_oneof:"referenceable_schema" json:"referenceableSchema,omitempty"`
}

func (x *ReferenceableSchema) Reset() {
	*x = ReferenceableSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_openapi_openapi_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceableSchema) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceableSchema) ProtoMessage() {}

func (x *ReferenceableSchema) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_openapi_openapi_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceableSchema.ProtoReflect.Descriptor instead.
func (*ReferenceableSchema) Descriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{14}
}

func (m *ReferenceableSchema) GetReferenceableSchema() isReferenceableSchema_ReferenceableSchema {
	if m != nil {
		return m.ReferenceableSchema
	}
	return nil
}

func (x *ReferenceableSchema) GetReference() *Reference {
	if x, ok := x.GetReferenceableSchema().(*ReferenceableSchema_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ReferenceableSchema) GetSchema() *Schema {
	if x, ok := x.GetReferenceableSchema().(*ReferenceableSchema_Schema); ok {
		return x.Schema
	}
	return nil
}

type isReferenceableSchema_ReferenceableSchema interface {
	isReferenceableSchema_ReferenceableSchema()
}

type ReferenceableSchema_Reference struct {
	Reference *Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof" json:"reference,omitempty"`
}

type ReferenceableSchema_Schema struct {
	Schema *Schema `protobuf:"bytes,2,opt,name=schema,proto3,oneof" json:"schema,omitempty"`
}

func (*ReferenceableSchema_Reference) isReferenceableSchema_ReferenceableSchema() {}

func (*ReferenceableSchema_Schema) isReferenceableSchema_ReferenceableSchema() {}

type ReferenceableParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ReferenceableParameter:
	//	*ReferenceableParameter_Reference
	//	*ReferenceableParameter_Parameter
	ReferenceableParameter isReferenceableParameter_ReferenceableParameter `protobuf_oneof:"referenceable_parameter" json:"referenceableParameter,omitempty"`
}

func (x *ReferenceableParameter) Reset() {
	*x = ReferenceableParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_openapi_openapi_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceableParameter) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceableParameter) ProtoMessage() {}

func (x *ReferenceableParameter) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_openapi_openapi_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceableParameter.ProtoReflect.Descriptor instead.
func (*ReferenceableParameter) Descriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{15}
}

func (m *ReferenceableParameter) GetReferenceableParameter() isReferenceableParameter_ReferenceableParameter {
	if m != nil {
		return m.ReferenceableParameter
	}
	return nil
}

func (x *ReferenceableParameter) GetReference() *Reference {
	if x, ok := x.GetReferenceableParameter().(*ReferenceableParameter_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ReferenceableParameter) GetParameter() *Parameter {
	if x, ok := x.GetReferenceableParameter().(*ReferenceableParameter_Parameter); ok {
		return x.Parameter
	}
	return nil
}

type isReferenceableParameter_ReferenceableParameter interface {
	isReferenceableParameter_ReferenceableParameter()
}

type ReferenceableParameter_Reference struct {
	Reference *Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof" json:"reference,omitempty"`
}

type ReferenceableParameter_Parameter struct {
	Parameter *Parameter `protobuf:"bytes,2,opt,name=parameter,proto3,oneof" json:"parameter,omitempty"`
}

func (*ReferenceableParameter_Reference) isReferenceableParameter_ReferenceableParameter() {}

func (*ReferenceableParameter_Parameter) isReferenceableParameter_ReferenceableParameter() {}

type ReferenceableRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ReferenceableRequestBody:
	//	*ReferenceableRequestBody_Reference
	//	*ReferenceableRequestBody_RequestBody
	ReferenceableRequestBody isReferenceableRequestBody_ReferenceableRequestBody `protobuf_oneof:"referenceable_request_body" json:"referenceableRequestBody,omitempty"`
}

func (x *ReferenceableRequestBody) Reset() {
	*x = ReferenceableRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_openapi_openapi_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceableRequestBody) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceableRequestBody) ProtoMessage() {}

func (x *ReferenceableRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_openapi_openapi_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceableRequestBody.ProtoReflect.Descriptor instead.
func (*ReferenceableRequestBody) Descriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{16}
}

func (m *ReferenceableRequestBody) GetReferenceableRequestBody() isReferenceableRequestBody_ReferenceableRequestBody {
	if m != nil {
		return m.ReferenceableRequestBody
	}
	return nil
}

func (x *ReferenceableRequestBody) GetReference() *Reference {
	if x, ok := x.GetReferenceableRequestBody().(*ReferenceableRequestBody_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ReferenceableRequestBody) GetRequestBody() *RequestBody {
	if x, ok := x.GetReferenceableRequestBody().(*ReferenceableRequestBody_RequestBody); ok {
		return x.RequestBody
	}
	return nil
}

type isReferenceableRequestBody_ReferenceableRequestBody interface {
	isReferenceableRequestBody_ReferenceableRequestBody()
}

type ReferenceableRequestBody_Reference struct {
	Reference *Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof" json:"reference,omitempty"`
}

type ReferenceableRequestBody_RequestBody struct {
	RequestBody *RequestBody `protobuf:"bytes,2,opt,name=request_body,json=requestBody,proto3,oneof" json:"requestBody,omitempty"`
}

func (*ReferenceableRequestBody_Reference) isReferenceableRequestBody_ReferenceableRequestBody() {}

func (*ReferenceableRequestBody_RequestBody) isReferenceableRequestBody_ReferenceableRequestBody() {}

type ReferenceableCallback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ReferenceableCallback:
	//	*ReferenceableCallback_Reference
	//	*ReferenceableCallback_Callback
	ReferenceableCallback isReferenceableCallback_ReferenceableCallback `protobuf_oneof:"referenceable_callback" json:"referenceableCallback,omitempty"`
}

func (x *ReferenceableCallback) Reset() {
	*x = ReferenceableCallback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_openapi_openapi_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceableCallback) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceableCallback) ProtoMessage() {}

func (x *ReferenceableCallback) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_openapi_openapi_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceableCallback.ProtoReflect.Descriptor instead.
func (*ReferenceableCallback) Descriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{17}
}

func (m *ReferenceableCallback) GetReferenceableCallback() isReferenceableCallback_ReferenceableCallback {
	if m != nil {
		return m.ReferenceableCallback
	}
	return nil
}

func (x *ReferenceableCallback) GetReference() *Reference {
	if x, ok := x.GetReferenceableCallback().(*ReferenceableCallback_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ReferenceableCallback) GetCallback() *Callback {
	if x, ok := x.GetReferenceableCallback().(*ReferenceableCallback_Callback); ok {
		return x.Callback
	}
	return nil
}

type isReferenceableCallback_ReferenceableCallback interface {
	isReferenceableCallback_ReferenceableCallback()
}

type ReferenceableCallback_Reference struct {
	Reference *Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof" json:"reference,omitempty"`
}

type ReferenceableCallback_Callback struct {
	Callback *Callback `protobuf:"bytes,2,opt,name=callback,proto3,oneof" json:"callback,omitempty"`
}

func (*ReferenceableCallback_Reference) isReferenceableCallback_ReferenceableCallback() {}

func (*ReferenceableCallback_Callback) isReferenceableCallback_ReferenceableCallback() {}

type ReferenceableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ReferenceableResponse:
	//	*ReferenceableResponse_Reference
	//	*ReferenceableResponse_Response
	ReferenceableResponse isReferenceableResponse_ReferenceableResponse `protobuf_oneof:"referenceable_response" json:"referenceableResponse,omitempty"`
}

func (x *ReferenceableResponse) Reset() {
	*x = ReferenceableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_openapi_openapi_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceableResponse) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceableResponse) ProtoMessage() {}

func (x *ReferenceableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_openapi_openapi_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceableResponse.ProtoReflect.Descriptor instead.
func (*ReferenceableResponse) Descriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{18}
}

func (m *ReferenceableResponse) GetReferenceableResponse() isReferenceableResponse_ReferenceableResponse {
	if m != nil {
		return m.ReferenceableResponse
	}
	return nil
}

func (x *ReferenceableResponse) GetReference() *Reference {
	if x, ok := x.GetReferenceableResponse().(*ReferenceableResponse_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ReferenceableResponse) GetResponse() *Response {
	if x, ok := x.GetReferenceableResponse().(*ReferenceableResponse_Response); ok {
		return x.Response
	}
	return nil
}

type isReferenceableResponse_ReferenceableResponse interface {
	isReferenceableResponse_ReferenceableResponse()
}

type ReferenceableResponse_Reference struct {
	Reference *Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof" json:"reference,omitempty"`
}

type ReferenceableResponse_Response struct {
	Response *Response `protobuf:"bytes,2,opt,name=response,proto3,oneof" json:"response,omitempty"`
}

func (*ReferenceableResponse_Reference) isReferenceableResponse_ReferenceableResponse() {}

func (*ReferenceableResponse_Response) isReferenceableResponse_ReferenceableResponse() {}

type Paths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vals map[string]*PathItem `protobuf:"bytes,1,rep,name=vals,proto3" json:"vals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Paths) Reset() {
	*x = Paths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mojo_openapi_openapi_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paths) ToText() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paths) ProtoMessage() {}

func (x *Paths) ProtoReflect() protoreflect.Message {
	mi := &file_mojo_openapi_openapi_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paths.ProtoReflect.Descriptor instead.
func (*Paths) Descriptor() ([]byte, []int) {
	return file_mojo_openapi_openapi_proto_rawDescGZIP(), []int{19}
}

func (x *Paths) GetVals() map[string]*PathItem {
	if x != nil {
		return x.Vals
	}
	return nil
}

var File_mojo_openapi_openapi_proto protoreflect.FileDescriptor

var file_mojo_openapi_openapi_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x1a, 0x15, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x15, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0f, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x22, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6d, 0x6f, 0x6a, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x2f, 0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x78, 0x6d, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xba, 0x0c, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x58, 0x0a,
	0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x61, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x1a, 0x50, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x0f, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x52, 0x0a, 0x0d, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x50, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x0e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x0e, 0x50, 0x61,
	0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x9f, 0x03, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x12, 0x2c, 0x0a, 0x07,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x12, 0x26, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x38, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x43, 0x0a,
	0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x6f,
	0x63, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x34, 0x0a, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x56, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x76, 0x61, 0x6c, 0x73, 0x1a, 0x4f, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x02, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x1a, 0x5d, 0x0a, 0x0c,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe8, 0x05, 0x0a, 0x06,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x02, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2a, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x1a, 0x5f, 0x0a, 0x0d, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x53, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xae, 0x03, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x2a, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x41,
	0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x1a, 0x5f, 0x0a, 0x0d, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe1, 0x05, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x64, 0x6f, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x49, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x35, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x1a, 0x61, 0x0a, 0x0e, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9a, 0x08, 0x0a, 0x09,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x02, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x69, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12,
	0x39, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2a, 0x0a, 0x07, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x5f, 0x0a, 0x0d, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x75, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x14, 0x4c,
	0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x4f, 0x4b, 0x49, 0x45, 0x10, 0x04, 0x22, 0xaf, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x59, 0x4c, 0x45,
	0x5f, 0x4d, 0x41, 0x54, 0x52, 0x49, 0x58, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x59,
	0x4c, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54,
	0x59, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54,
	0x59, 0x4c, 0x45, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x59, 0x4c, 0x45,
	0x5f, 0x50, 0x49, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10,
	0x06, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x45, 0x50, 0x5f,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x07, 0x22, 0xe8, 0x04, 0x0a, 0x08, 0x50, 0x61, 0x74,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xca, 0xcf, 0x24, 0x04, 0x24, 0x72, 0x65, 0x66, 0x52, 0x03, 0x72, 0x65,
	0x66, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x03, 0x67,
	0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x03, 0x67, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x70, 0x75,
	0x74, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x31, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12,
	0x2d, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2d,
	0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x2e, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x1a, 0x53, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf2, 0x03, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x1a, 0x5d, 0x0a, 0x0c,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x59, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa0, 0x01, 0x0a, 0x09,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x76, 0x61, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x2e, 0x56, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x76, 0x61, 0x6c, 0x73,
	0x1a, 0x5c, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd9,
	0x0d, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x41, 0x0a, 0x0d, 0x64, 0x69, 0x73,
	0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x64,
	0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x03,
	0x78, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x58, 0x6d, 0x6c, 0x52, 0x03, 0x78, 0x6d,
	0x6c, 0x12, 0x43, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x6f,
	0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4f, 0x66,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x07,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x52,
	0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x44,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x1f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x38, 0x0a, 0x06,
	0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x66, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d,
	0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x05, 0x61, 0x6c, 0x6c, 0x4f, 0x66, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66,
	0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x05, 0x6f, 0x6e, 0x65, 0x4f, 0x66,
	0x12, 0x38, 0x0a, 0x06, 0x61, 0x6e, 0x79, 0x5f, 0x6f, 0x66, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x05, 0x61, 0x6e, 0x79, 0x4f, 0x66, 0x12, 0x33, 0x0a, 0x03, 0x6e, 0x6f,
	0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x12,
	0x2a, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64,
	0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x1a, 0x60, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x92, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c,
	0x45, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x0b, 0x22, 0x96, 0x01, 0x0a, 0x13, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x22, 0x96, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x37, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x48, 0x00, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x42, 0x16, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xa5, 0x01, 0x0a,
	0x16, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a,
	0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x37, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x19, 0x0a, 0x17, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x22, 0xb1, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x1c, 0x0a, 0x1a, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xa0, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x42, 0x18, 0x0a, 0x16, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0xa0, 0x01, 0x0a, 0x15,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b,
	0x01, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x76, 0x61, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x1a, 0x4f, 0x0a, 0x09, 0x56,
	0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x4d, 0x0a, 0x0e,
	0x48, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x32, 0x30, 0x30, 0x10, 0x01, 0x42, 0x65, 0x0a, 0x19, 0x6f,
	0x72, 0x67, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x6a, 0x6f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x42, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6f, 0x6a, 0x6f, 0x2d, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f,
	0x6a, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x3b, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mojo_openapi_openapi_proto_rawDescOnce sync.Once
	file_mojo_openapi_openapi_proto_rawDescData = file_mojo_openapi_openapi_proto_rawDesc
)

func file_mojo_openapi_openapi_proto_rawDescGZIP() []byte {
	file_mojo_openapi_openapi_proto_rawDescOnce.Do(func() {
		file_mojo_openapi_openapi_proto_rawDescData = protoimpl.X.CompressGZIP(file_mojo_openapi_openapi_proto_rawDescData)
	})
	return file_mojo_openapi_openapi_proto_rawDescData
}

var file_mojo_openapi_openapi_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_mojo_openapi_openapi_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_mojo_openapi_openapi_proto_goTypes = []interface{}{
	(HttpStatusCode)(0),              // 0: mojo.openapi.HttpStatusCode
	(Parameter_Location)(0),          // 1: mojo.openapi.Parameter.Location
	(Parameter_Style)(0),             // 2: mojo.openapi.Parameter.Style
	(Schema_Type)(0),                 // 3: mojo.openapi.Schema.Type
	(*Components)(nil),               // 4: mojo.openapi.Components
	(*OpenAPI)(nil),                  // 5: mojo.openapi.OpenAPI
	(*Callback)(nil),                 // 6: mojo.openapi.Callback
	(*Encoding)(nil),                 // 7: mojo.openapi.Encoding
	(*Header)(nil),                   // 8: mojo.openapi.Header
	(*MediaType)(nil),                // 9: mojo.openapi.MediaType
	(*Operation)(nil),                // 10: mojo.openapi.Operation
	(*Parameter)(nil),                // 11: mojo.openapi.Parameter
	(*PathItem)(nil),                 // 12: mojo.openapi.PathItem
	(*RequestBody)(nil),              // 13: mojo.openapi.RequestBody
	(*Response)(nil),                 // 14: mojo.openapi.Response
	(*Responses)(nil),                // 15: mojo.openapi.Responses
	(*Schema)(nil),                   // 16: mojo.openapi.Schema
	(*ReferenceableHeader)(nil),      // 17: mojo.openapi.ReferenceableHeader
	(*ReferenceableSchema)(nil),      // 18: mojo.openapi.ReferenceableSchema
	(*ReferenceableParameter)(nil),   // 19: mojo.openapi.ReferenceableParameter
	(*ReferenceableRequestBody)(nil), // 20: mojo.openapi.ReferenceableRequestBody
	(*ReferenceableCallback)(nil),    // 21: mojo.openapi.ReferenceableCallback
	(*ReferenceableResponse)(nil),    // 22: mojo.openapi.ReferenceableResponse
	(*Paths)(nil),                    // 23: mojo.openapi.Paths
	nil,                              // 24: mojo.openapi.Components.SchemasEntry
	nil,                              // 25: mojo.openapi.Components.ResponsesEntry
	nil,                              // 26: mojo.openapi.Components.ParametersEntry
	nil,                              // 27: mojo.openapi.Components.ExamplesEntry
	nil,                              // 28: mojo.openapi.Components.RequestBodiesEntry
	nil,                              // 29: mojo.openapi.Components.HeadersEntry
	nil,                              // 30: mojo.openapi.Components.SecuritySchemesEntry
	nil,                              // 31: mojo.openapi.Components.LinksEntry
	nil,                              // 32: mojo.openapi.Components.CallbacksEntry
	nil,                              // 33: mojo.openapi.Components.PathItemsEntry
	nil,                              // 34: mojo.openapi.Callback.ValsEntry
	nil,                              // 35: mojo.openapi.Encoding.HeadersEntry
	nil,                              // 36: mojo.openapi.Header.ExamplesEntry
	nil,                              // 37: mojo.openapi.Header.ContentEntry
	nil,                              // 38: mojo.openapi.MediaType.ExamplesEntry
	nil,                              // 39: mojo.openapi.MediaType.EncodingEntry
	nil,                              // 40: mojo.openapi.Operation.CallbacksEntry
	nil,                              // 41: mojo.openapi.Parameter.ExamplesEntry
	nil,                              // 42: mojo.openapi.Parameter.ContentEntry
	nil,                              // 43: mojo.openapi.RequestBody.ContentEntry
	nil,                              // 44: mojo.openapi.Response.HeadersEntry
	nil,                              // 45: mojo.openapi.Response.ContentEntry
	nil,                              // 46: mojo.openapi.Response.LinksEntry
	nil,                              // 47: mojo.openapi.Responses.ValsEntry
	nil,                              // 48: mojo.openapi.Schema.PropertiesEntry
	nil,                              // 49: mojo.openapi.Paths.ValsEntry
	(*core.Version)(nil),             // 50: mojo.core.Version
	(*Info)(nil),                     // 51: mojo.openapi.Info
	(*Server)(nil),                   // 52: mojo.openapi.Server
	(*SecurityRequirement)(nil),      // 53: mojo.openapi.SecurityRequirement
	(*Tag)(nil),                      // 54: mojo.openapi.Tag
	(*ExternalDocument)(nil),         // 55: mojo.openapi.ExternalDocument
	(*core.Value)(nil),               // 56: mojo.core.Value
	(*CachedDocument)(nil),           // 57: mojo.openapi.CachedDocument
	(*Discriminator)(nil),            // 58: mojo.openapi.Discriminator
	(*Xml)(nil),                      // 59: mojo.openapi.Xml
	(*core.Regex)(nil),               // 60: mojo.core.Regex
	(*Reference)(nil),                // 61: mojo.openapi.Reference
	(*Example)(nil),                  // 62: mojo.openapi.Example
	(*SecurityScheme)(nil),           // 63: mojo.openapi.SecurityScheme
	(*Link)(nil),                     // 64: mojo.openapi.Link
	(*ReferenceableExample)(nil),     // 65: mojo.openapi.ReferenceableExample
	(*ReferenceableLink)(nil),        // 66: mojo.openapi.ReferenceableLink
}
var file_mojo_openapi_openapi_proto_depIdxs = []int32{
	24,  // 0: mojo.openapi.Components.schemas:type_name -> mojo.openapi.Components.SchemasEntry
	25,  // 1: mojo.openapi.Components.responses:type_name -> mojo.openapi.Components.ResponsesEntry
	26,  // 2: mojo.openapi.Components.parameters:type_name -> mojo.openapi.Components.ParametersEntry
	27,  // 3: mojo.openapi.Components.examples:type_name -> mojo.openapi.Components.ExamplesEntry
	28,  // 4: mojo.openapi.Components.request_bodies:type_name -> mojo.openapi.Components.RequestBodiesEntry
	29,  // 5: mojo.openapi.Components.headers:type_name -> mojo.openapi.Components.HeadersEntry
	30,  // 6: mojo.openapi.Components.security_schemes:type_name -> mojo.openapi.Components.SecuritySchemesEntry
	31,  // 7: mojo.openapi.Components.links:type_name -> mojo.openapi.Components.LinksEntry
	32,  // 8: mojo.openapi.Components.callbacks:type_name -> mojo.openapi.Components.CallbacksEntry
	33,  // 9: mojo.openapi.Components.path_items:type_name -> mojo.openapi.Components.PathItemsEntry
	50,  // 10: mojo.openapi.OpenAPI.openapi:type_name -> mojo.core.Version
	51,  // 11: mojo.openapi.OpenAPI.info:type_name -> mojo.openapi.Info
	52,  // 12: mojo.openapi.OpenAPI.servers:type_name -> mojo.openapi.Server
	23,  // 13: mojo.openapi.OpenAPI.paths:type_name -> mojo.openapi.Paths
	4,   // 14: mojo.openapi.OpenAPI.components:type_name -> mojo.openapi.Components
	53,  // 15: mojo.openapi.OpenAPI.security:type_name -> mojo.openapi.SecurityRequirement
	54,  // 16: mojo.openapi.OpenAPI.tags:type_name -> mojo.openapi.Tag
	55,  // 17: mojo.openapi.OpenAPI.external_docs:type_name -> mojo.openapi.ExternalDocument
	34,  // 18: mojo.openapi.Callback.vals:type_name -> mojo.openapi.Callback.ValsEntry
	35,  // 19: mojo.openapi.Encoding.headers:type_name -> mojo.openapi.Encoding.HeadersEntry
	1,   // 20: mojo.openapi.Header.in:type_name -> mojo.openapi.Parameter.Location
	2,   // 21: mojo.openapi.Header.style:type_name -> mojo.openapi.Parameter.Style
	18,  // 22: mojo.openapi.Header.schema:type_name -> mojo.openapi.ReferenceableSchema
	56,  // 23: mojo.openapi.Header.example:type_name -> mojo.core.Value
	36,  // 24: mojo.openapi.Header.examples:type_name -> mojo.openapi.Header.ExamplesEntry
	37,  // 25: mojo.openapi.Header.content:type_name -> mojo.openapi.Header.ContentEntry
	18,  // 26: mojo.openapi.MediaType.schema:type_name -> mojo.openapi.ReferenceableSchema
	56,  // 27: mojo.openapi.MediaType.example:type_name -> mojo.core.Value
	38,  // 28: mojo.openapi.MediaType.examples:type_name -> mojo.openapi.MediaType.ExamplesEntry
	39,  // 29: mojo.openapi.MediaType.encoding:type_name -> mojo.openapi.MediaType.EncodingEntry
	57,  // 30: mojo.openapi.Operation.description:type_name -> mojo.openapi.CachedDocument
	55,  // 31: mojo.openapi.Operation.external_docs:type_name -> mojo.openapi.ExternalDocument
	19,  // 32: mojo.openapi.Operation.parameters:type_name -> mojo.openapi.ReferenceableParameter
	20,  // 33: mojo.openapi.Operation.request_body:type_name -> mojo.openapi.ReferenceableRequestBody
	15,  // 34: mojo.openapi.Operation.responses:type_name -> mojo.openapi.Responses
	40,  // 35: mojo.openapi.Operation.callbacks:type_name -> mojo.openapi.Operation.CallbacksEntry
	53,  // 36: mojo.openapi.Operation.security:type_name -> mojo.openapi.SecurityRequirement
	52,  // 37: mojo.openapi.Operation.servers:type_name -> mojo.openapi.Server
	1,   // 38: mojo.openapi.Parameter.in:type_name -> mojo.openapi.Parameter.Location
	2,   // 39: mojo.openapi.Parameter.style:type_name -> mojo.openapi.Parameter.Style
	18,  // 40: mojo.openapi.Parameter.schema:type_name -> mojo.openapi.ReferenceableSchema
	56,  // 41: mojo.openapi.Parameter.example:type_name -> mojo.core.Value
	41,  // 42: mojo.openapi.Parameter.examples:type_name -> mojo.openapi.Parameter.ExamplesEntry
	42,  // 43: mojo.openapi.Parameter.content:type_name -> mojo.openapi.Parameter.ContentEntry
	57,  // 44: mojo.openapi.PathItem.description:type_name -> mojo.openapi.CachedDocument
	10,  // 45: mojo.openapi.PathItem.get:type_name -> mojo.openapi.Operation
	10,  // 46: mojo.openapi.PathItem.put:type_name -> mojo.openapi.Operation
	10,  // 47: mojo.openapi.PathItem.post:type_name -> mojo.openapi.Operation
	10,  // 48: mojo.openapi.PathItem.delete:type_name -> mojo.openapi.Operation
	10,  // 49: mojo.openapi.PathItem.options:type_name -> mojo.openapi.Operation
	10,  // 50: mojo.openapi.PathItem.head:type_name -> mojo.openapi.Operation
	10,  // 51: mojo.openapi.PathItem.patch:type_name -> mojo.openapi.Operation
	10,  // 52: mojo.openapi.PathItem.trace:type_name -> mojo.openapi.Operation
	52,  // 53: mojo.openapi.PathItem.servers:type_name -> mojo.openapi.Server
	19,  // 54: mojo.openapi.PathItem.parameters:type_name -> mojo.openapi.ReferenceableParameter
	57,  // 55: mojo.openapi.RequestBody.description:type_name -> mojo.openapi.CachedDocument
	43,  // 56: mojo.openapi.RequestBody.content:type_name -> mojo.openapi.RequestBody.ContentEntry
	44,  // 57: mojo.openapi.Response.headers:type_name -> mojo.openapi.Response.HeadersEntry
	45,  // 58: mojo.openapi.Response.content:type_name -> mojo.openapi.Response.ContentEntry
	46,  // 59: mojo.openapi.Response.links:type_name -> mojo.openapi.Response.LinksEntry
	47,  // 60: mojo.openapi.Responses.vals:type_name -> mojo.openapi.Responses.ValsEntry
	58,  // 61: mojo.openapi.Schema.discriminator:type_name -> mojo.openapi.Discriminator
	59,  // 62: mojo.openapi.Schema.xml:type_name -> mojo.openapi.Xml
	55,  // 63: mojo.openapi.Schema.external_docs:type_name -> mojo.openapi.ExternalDocument
	56,  // 64: mojo.openapi.Schema.example:type_name -> mojo.core.Value
	57,  // 65: mojo.openapi.Schema.description:type_name -> mojo.openapi.CachedDocument
	3,   // 66: mojo.openapi.Schema.type:type_name -> mojo.openapi.Schema.Type
	60,  // 67: mojo.openapi.Schema.pattern:type_name -> mojo.core.Regex
	18,  // 68: mojo.openapi.Schema.items:type_name -> mojo.openapi.ReferenceableSchema
	48,  // 69: mojo.openapi.Schema.properties:type_name -> mojo.openapi.Schema.PropertiesEntry
	18,  // 70: mojo.openapi.Schema.additional_properties:type_name -> mojo.openapi.ReferenceableSchema
	56,  // 71: mojo.openapi.Schema.enum:type_name -> mojo.core.Value
	18,  // 72: mojo.openapi.Schema.all_of:type_name -> mojo.openapi.ReferenceableSchema
	18,  // 73: mojo.openapi.Schema.one_of:type_name -> mojo.openapi.ReferenceableSchema
	18,  // 74: mojo.openapi.Schema.any_of:type_name -> mojo.openapi.ReferenceableSchema
	18,  // 75: mojo.openapi.Schema.not:type_name -> mojo.openapi.ReferenceableSchema
	56,  // 76: mojo.openapi.Schema.default:type_name -> mojo.core.Value
	61,  // 77: mojo.openapi.ReferenceableHeader.reference:type_name -> mojo.openapi.Reference
	8,   // 78: mojo.openapi.ReferenceableHeader.header:type_name -> mojo.openapi.Header
	61,  // 79: mojo.openapi.ReferenceableSchema.reference:type_name -> mojo.openapi.Reference
	16,  // 80: mojo.openapi.ReferenceableSchema.schema:type_name -> mojo.openapi.Schema
	61,  // 81: mojo.openapi.ReferenceableParameter.reference:type_name -> mojo.openapi.Reference
	11,  // 82: mojo.openapi.ReferenceableParameter.parameter:type_name -> mojo.openapi.Parameter
	61,  // 83: mojo.openapi.ReferenceableRequestBody.reference:type_name -> mojo.openapi.Reference
	13,  // 84: mojo.openapi.ReferenceableRequestBody.request_body:type_name -> mojo.openapi.RequestBody
	61,  // 85: mojo.openapi.ReferenceableCallback.reference:type_name -> mojo.openapi.Reference
	6,   // 86: mojo.openapi.ReferenceableCallback.callback:type_name -> mojo.openapi.Callback
	61,  // 87: mojo.openapi.ReferenceableResponse.reference:type_name -> mojo.openapi.Reference
	14,  // 88: mojo.openapi.ReferenceableResponse.response:type_name -> mojo.openapi.Response
	49,  // 89: mojo.openapi.Paths.vals:type_name -> mojo.openapi.Paths.ValsEntry
	16,  // 90: mojo.openapi.Components.SchemasEntry.value:type_name -> mojo.openapi.Schema
	14,  // 91: mojo.openapi.Components.ResponsesEntry.value:type_name -> mojo.openapi.Response
	11,  // 92: mojo.openapi.Components.ParametersEntry.value:type_name -> mojo.openapi.Parameter
	62,  // 93: mojo.openapi.Components.ExamplesEntry.value:type_name -> mojo.openapi.Example
	13,  // 94: mojo.openapi.Components.RequestBodiesEntry.value:type_name -> mojo.openapi.RequestBody
	8,   // 95: mojo.openapi.Components.HeadersEntry.value:type_name -> mojo.openapi.Header
	63,  // 96: mojo.openapi.Components.SecuritySchemesEntry.value:type_name -> mojo.openapi.SecurityScheme
	64,  // 97: mojo.openapi.Components.LinksEntry.value:type_name -> mojo.openapi.Link
	6,   // 98: mojo.openapi.Components.CallbacksEntry.value:type_name -> mojo.openapi.Callback
	12,  // 99: mojo.openapi.Components.PathItemsEntry.value:type_name -> mojo.openapi.PathItem
	12,  // 100: mojo.openapi.Callback.ValsEntry.value:type_name -> mojo.openapi.PathItem
	17,  // 101: mojo.openapi.Encoding.HeadersEntry.value:type_name -> mojo.openapi.ReferenceableHeader
	65,  // 102: mojo.openapi.Header.ExamplesEntry.value:type_name -> mojo.openapi.ReferenceableExample
	9,   // 103: mojo.openapi.Header.ContentEntry.value:type_name -> mojo.openapi.MediaType
	65,  // 104: mojo.openapi.MediaType.ExamplesEntry.value:type_name -> mojo.openapi.ReferenceableExample
	7,   // 105: mojo.openapi.MediaType.EncodingEntry.value:type_name -> mojo.openapi.Encoding
	21,  // 106: mojo.openapi.Operation.CallbacksEntry.value:type_name -> mojo.openapi.ReferenceableCallback
	65,  // 107: mojo.openapi.Parameter.ExamplesEntry.value:type_name -> mojo.openapi.ReferenceableExample
	9,   // 108: mojo.openapi.Parameter.ContentEntry.value:type_name -> mojo.openapi.MediaType
	9,   // 109: mojo.openapi.RequestBody.ContentEntry.value:type_name -> mojo.openapi.MediaType
	17,  // 110: mojo.openapi.Response.HeadersEntry.value:type_name -> mojo.openapi.ReferenceableHeader
	9,   // 111: mojo.openapi.Response.ContentEntry.value:type_name -> mojo.openapi.MediaType
	66,  // 112: mojo.openapi.Response.LinksEntry.value:type_name -> mojo.openapi.ReferenceableLink
	22,  // 113: mojo.openapi.Responses.ValsEntry.value:type_name -> mojo.openapi.ReferenceableResponse
	18,  // 114: mojo.openapi.Schema.PropertiesEntry.value:type_name -> mojo.openapi.ReferenceableSchema
	12,  // 115: mojo.openapi.Paths.ValsEntry.value:type_name -> mojo.openapi.PathItem
	116, // [116:116] is the sub-list for method output_type
	116, // [116:116] is the sub-list for method input_type
	116, // [116:116] is the sub-list for extension type_name
	116, // [116:116] is the sub-list for extension extendee
	0,   // [0:116] is the sub-list for field type_name
}

func init() { file_mojo_openapi_openapi_proto_init() }
func file_mojo_openapi_openapi_proto_init() {
	if File_mojo_openapi_openapi_proto != nil {
		return
	}
	file_mojo_openapi_cached_document_proto_init()
	file_mojo_openapi_discriminator_proto_init()
	file_mojo_openapi_example_proto_init()
	file_mojo_openapi_external_document_proto_init()
	file_mojo_openapi_info_proto_init()
	file_mojo_openapi_link_proto_init()
	file_mojo_openapi_reference_proto_init()
	file_mojo_openapi_referenceable_example_proto_init()
	file_mojo_openapi_referenceable_link_proto_init()
	file_mojo_openapi_security_requirement_proto_init()
	file_mojo_openapi_security_scheme_proto_init()
	file_mojo_openapi_server_proto_init()
	file_mojo_openapi_tag_proto_init()
	file_mojo_openapi_xml_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mojo_openapi_openapi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Components); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_openapi_openapi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_openapi_openapi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Callback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_openapi_openapi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Encoding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_openapi_openapi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_openapi_openapi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_openapi_openapi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_openapi_openapi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_openapi_openapi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_openapi_openapi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_openapi_openapi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_openapi_openapi_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Responses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_openapi_openapi_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_openapi_openapi_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceableHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_openapi_openapi_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceableSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_openapi_openapi_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceableParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_openapi_openapi_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceableRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_openapi_openapi_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceableCallback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_openapi_openapi_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mojo_openapi_openapi_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mojo_openapi_openapi_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*ReferenceableHeader_Reference)(nil),
		(*ReferenceableHeader_Header)(nil),
	}
	file_mojo_openapi_openapi_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*ReferenceableSchema_Reference)(nil),
		(*ReferenceableSchema_Schema)(nil),
	}
	file_mojo_openapi_openapi_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*ReferenceableParameter_Reference)(nil),
		(*ReferenceableParameter_Parameter)(nil),
	}
	file_mojo_openapi_openapi_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ReferenceableRequestBody_Reference)(nil),
		(*ReferenceableRequestBody_RequestBody)(nil),
	}
	file_mojo_openapi_openapi_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*ReferenceableCallback_Reference)(nil),
		(*ReferenceableCallback_Callback)(nil),
	}
	file_mojo_openapi_openapi_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*ReferenceableResponse_Reference)(nil),
		(*ReferenceableResponse_Response)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mojo_openapi_openapi_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mojo_openapi_openapi_proto_goTypes,
		DependencyIndexes: file_mojo_openapi_openapi_proto_depIdxs,
		EnumInfos:         file_mojo_openapi_openapi_proto_enumTypes,
		MessageInfos:      file_mojo_openapi_openapi_proto_msgTypes,
	}.Build()
	File_mojo_openapi_openapi_proto = out.File
	file_mojo_openapi_openapi_proto_rawDesc = nil
	file_mojo_openapi_openapi_proto_goTypes = nil
	file_mojo_openapi_openapi_proto_depIdxs = nil
}
